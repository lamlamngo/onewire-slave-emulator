/* GLD file for PIC24 application using the Bully bootloader. */
/*
 * Linker script for PIC33FJ64MC508
 * (c) Copyright 2013 Microchip Technology, Inc
 * Part support version 1.30.A(22-Nov-2016)
 *
 * This software is developed by Microchip Technology Inc. and its
 * subsidiaries ("Microchip").
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are 
 * met:
 * 
 * 1.      Redistributions of source code must retain the above copyright
 *         notice, this list of conditions and the following disclaimer.
 * 2.      Redistributions in binary form must reproduce the above 
 *         copyright notice, this list of conditions and the following 
 *         disclaimer in the documentation and/or other materials provided 
 *         with the distribution.
 * 3.      Microchip's name may not be used to endorse or promote products
 *         derived from this software without specific prior written 
 *         permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */


OUTPUT_ARCH("33FJ64MC508")
CRT0_STARTUP(crt0_standard.o)
CRT1_STARTUP(crt1_standard.o)
#if __XC16_VERSION__ > 1027
/*
 * Define how to startup, by default we initialize
 * everything as normal; change to crt_start_mode to
 * preserve preserved data on a restart
 *
 * Or define your own __crt_start_mode fucntion
 */
CRT_STARTMODE(crt_start_mode_normal)
#endif

OPTIONAL(-lp33FJ64MC508)
OPTIONAL(-lfx)

/*
** Memory Regions
*/
MEMORY
{
  data  (a!xr)   : ORIGIN = 0x800,         LENGTH = 0x2000
  reset          : ORIGIN = 0x0,           LENGTH = 0x4
  ivt            : ORIGIN = 0x4,           LENGTH = 0xFC
  _reserved      : ORIGIN = 0x100,         LENGTH = 0x4
  aivt           : ORIGIN = 0x104,         LENGTH = 0xFC
  j_ivt          : ORIGIN = 0xc00,          LENGTH = 0x200
  program (xr)   : ORIGIN = 0xe00,         LENGTH = 0x9e00
  FBS            : ORIGIN = 0xF80000,      LENGTH = 0x2
  FSS            : ORIGIN = 0xF80002,      LENGTH = 0x2
  FGS            : ORIGIN = 0xF80004,      LENGTH = 0x2
  FOSCSEL        : ORIGIN = 0xF80006,      LENGTH = 0x2
  FOSC           : ORIGIN = 0xF80008,      LENGTH = 0x2
  FWDT           : ORIGIN = 0xF8000A,      LENGTH = 0x2
  FPOR           : ORIGIN = 0xF8000C,      LENGTH = 0x2
  FICD           : ORIGIN = 0xF8000E,      LENGTH = 0x2
  FUID0          : ORIGIN = 0xF80010,      LENGTH = 0x2
  FUID1          : ORIGIN = 0xF80012,      LENGTH = 0x2
  FUID2          : ORIGIN = 0xF80014,      LENGTH = 0x2
  FUID3          : ORIGIN = 0xF80016,      LENGTH = 0x2
}
__JIVT_BASE          = 0xc00;
J__ReservedTrap0 = 0xc02;
J__OscillatorFail = 0xc06;
J__AddressError = 0xc0a;
J__StackError = 0xc0e;
J__MathError = 0xc12;
J__DMACError = 0xc16;
J__ReservedTrap6 = 0xc1a;
J__ReservedTrap7 = 0xc1e;
J__INT0Interrupt = 0xc22;
J__IC1Interrupt = 0xc26;
J__OC1Interrupt = 0xc2a;
J__T1Interrupt = 0xc2e;
J__DMA0Interrupt = 0xc32;
J__IC2Interrupt = 0xc36;
J__OC2Interrupt = 0xc3a;
J__T2Interrupt = 0xc3e;
J__T3Interrupt = 0xc42;
J__SPI1ErrInterrupt = 0xc46;
J__SPI1Interrupt = 0xc4a;
J__U1RXInterrupt = 0xc4e;
J__U1TXInterrupt = 0xc52;
J__ADC1Interrupt = 0xc56;
J__DMA1Interrupt = 0xc5a;
J__Interrupt15 = 0xc5e;
J__SI2C1Interrupt = 0xc62;
J__MI2C1Interrupt = 0xc66;
J__CMPInterrupt = 0xc6a;
J__CNInterrupt = 0xc6e;
J__INT1Interrupt = 0xc72;
J__ADC2Interrupt = 0xc76;
J__IC7Interrupt = 0xc7a;
J__IC8Interrupt = 0xc7e;
J__DMA2Interrupt = 0xc82;
J__OC3Interrupt = 0xc86;
J__OC4Interrupt = 0xc8a;
J__T4Interrupt = 0xc8e;
J__T5Interrupt = 0xc92;
J__INT2Interrupt = 0xc96;
J__U2RXInterrupt = 0xc9a;
J__U2TXInterrupt = 0xc9e;
J__SPI2ErrInterrupt = 0xca2;
J__SPI2Interrupt = 0xca6;
J__C1RxRdyInterrupt = 0xcaa;
J__C1Interrupt = 0xcae;
J__DMA3Interrupt = 0xcb2;
J__IC3Interrupt = 0xcb6;
J__IC4Interrupt = 0xcba;
J__IC5Interrupt = 0xcbe;
J__IC6Interrupt = 0xcc2;
J__OC5Interrupt = 0xcc6;
J__OC6Interrupt = 0xcca;
J__OC7Interrupt = 0xcce;
J__OC8Interrupt = 0xcd2;
J__PMPInterrupt = 0xcd6;
J__DMA4Interrupt = 0xcda;
J__T6Interrupt = 0xcde;
J__T7Interrupt = 0xce2;
J__SI2C2Interrupt = 0xce6;
J__MI2C2Interrupt = 0xcea;
J__T8Interrupt = 0xcee;
J__T9Interrupt = 0xcf2;
J__INT3Interrupt = 0xcf6;
J__INT4Interrupt = 0xcfa;
J__C2RxRdyInterrupt = 0xcfe;
J__C2Interrupt = 0xd02;
J__PWMInterrupt = 0xd06;
J__QEIInterrupt = 0xd0a;
J__DCIErrInterrupt = 0xd0e;
J__DCIInterrupt = 0xd12;
J__DMA5Interrupt = 0xd16;
J__RTCCInterrupt = 0xd1a;
J__FLTAInterrupt = 0xd1e;
J__FLTBInterrupt = 0xd22;
J__U1ErrInterrupt = 0xd26;
J__U2ErrInterrupt = 0xd2a;
J__CRCInterrupt = 0xd2e;
J__DMA6Interrupt = 0xd32;
J__DMA7Interrupt = 0xd36;
J__C1TxReqInterrupt = 0xd3a;
J__C2TxReqInterrupt = 0xd3e;
J__Interrupt72 = 0xd42;
J__Interrupt73 = 0xd46;
J__Interrupt74 = 0xd4a;
J__Interrupt75 = 0xd4e;
J__Interrupt76 = 0xd52;
J__Interrupt77 = 0xd56;
J__DAC1RInterrupt = 0xd5a;
J__DAC1LInterrupt = 0xd5e;
J__Interrupt80 = 0xd62;
J__Interrupt81 = 0xd66;
J__Interrupt82 = 0xd6a;
J__Interrupt83 = 0xd6e;
J__Interrupt84 = 0xd72;
J__Interrupt85 = 0xd76;
J__Interrupt86 = 0xd7a;
J__Interrupt87 = 0xd7e;
J__Interrupt88 = 0xd82;
J__Interrupt89 = 0xd86;
J__Interrupt90 = 0xd8a;
J__Interrupt91 = 0xd8e;
J__Interrupt92 = 0xd92;
J__Interrupt93 = 0xd96;
J__Interrupt94 = 0xd9a;
J__Interrupt95 = 0xd9e;
J__Interrupt96 = 0xda2;
J__Interrupt97 = 0xda6;
J__Interrupt98 = 0xdaa;
J__Interrupt99 = 0xdae;
J__Interrupt100 = 0xdb2;
J__Interrupt101 = 0xdb6;
J__Interrupt102 = 0xdba;
J__Interrupt103 = 0xdbe;
J__Interrupt104 = 0xdc2;
J__Interrupt105 = 0xdc6;
J__Interrupt106 = 0xdca;
J__Interrupt107 = 0xdce;
J__Interrupt108 = 0xdd2;
J__Interrupt109 = 0xdd6;
J__Interrupt110 = 0xdda;
J__Interrupt111 = 0xdde;
J__Interrupt112 = 0xde2;
J__Interrupt113 = 0xde6;
J__Interrupt114 = 0xdea;
J__Interrupt115 = 0xdee;
J__Interrupt116 = 0xdf2;
J__Interrupt117 = 0xdf6;

__FBS = 0xF80000;
__FSS = 0xF80002;
__FGS = 0xF80004;
__FOSCSEL = 0xF80006;
__FOSC = 0xF80008;
__FWDT = 0xF8000A;
__FPOR = 0xF8000C;
__FICD = 0xF8000E;
__FUID0 = 0xF80010;
__FUID1 = 0xF80012;
__FUID2 = 0xF80014;
__FUID3 = 0xF80016;
__NO_HANDLES = 1;          /* Suppress handles on this device  */
__CODE_BASE = 0x200;
__CODE_LENGTH = 0xAA00;
__IVT_BASE  = 0x4;
__AIVT_BASE = 0x104;

__DATA_BASE = 0x800;
__DATA_LENGTH = 0x2000;
__YDATA_BASE = 0x1800;
__DMA_BASE = 0x2000;
__DMA_END = 0x27FF;


/*
** ==================== Section Map ======================
*/
SECTIONS
{
  /*
  ** ========== Program Memory ==========
  */


#if !defined(__CORESIDENT) || defined(__DEFINE_RESET)
  /*
  ** Reset Instruction
  */
  .reset :
  {
        SHORT(ABSOLUTE(__reset));
        SHORT(0x04);
        SHORT((ABSOLUTE(__reset) >> 16) & 0x7F);
        SHORT(0);
  } >reset
#endif


  /*
  ** Interrupt Vector Tables
  **
  ** The primary and alternate tables are loaded
  ** here, between sections .reset and .text.
  ** Vector table source code appears below.
  */
.j_ivt __JIVT_BASE :
 {
 SHORT(0x02);  /* timeout value */
 SHORT(0x00);
    SHORT(DEFINED(__ReservedTrap0) ? ABSOLUTE(__ReservedTrap0) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__ReservedTrap0) ? ABSOLUTE(__ReservedTrap0) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__OscillatorFail) ? ABSOLUTE(__OscillatorFail) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__OscillatorFail) ? ABSOLUTE(__OscillatorFail) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__AddressError) ? ABSOLUTE(__AddressError) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__AddressError) ? ABSOLUTE(__AddressError) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__StackError) ? ABSOLUTE(__StackError) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__StackError) ? ABSOLUTE(__StackError) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__MathError) ? ABSOLUTE(__MathError) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__MathError) ? ABSOLUTE(__MathError) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__DMACError) ? ABSOLUTE(__DMACError) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__DMACError) ? ABSOLUTE(__DMACError) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__ReservedTrap6) ? ABSOLUTE(__ReservedTrap6) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__ReservedTrap6) ? ABSOLUTE(__ReservedTrap6) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__ReservedTrap7) ? ABSOLUTE(__ReservedTrap7) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__ReservedTrap7) ? ABSOLUTE(__ReservedTrap7) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__INT0Interrupt) ? ABSOLUTE(__INT0Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__INT0Interrupt) ? ABSOLUTE(__INT0Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__IC1Interrupt) ? ABSOLUTE(__IC1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__IC1Interrupt) ? ABSOLUTE(__IC1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__OC1Interrupt) ? ABSOLUTE(__OC1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__OC1Interrupt) ? ABSOLUTE(__OC1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__T1Interrupt) ? ABSOLUTE(__T1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__T1Interrupt) ? ABSOLUTE(__T1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__DMA0Interrupt) ? ABSOLUTE(__DMA0Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__DMA0Interrupt) ? ABSOLUTE(__DMA0Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__IC2Interrupt) ? ABSOLUTE(__IC2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__IC2Interrupt) ? ABSOLUTE(__IC2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__OC2Interrupt) ? ABSOLUTE(__OC2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__OC2Interrupt) ? ABSOLUTE(__OC2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__T2Interrupt) ? ABSOLUTE(__T2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__T2Interrupt) ? ABSOLUTE(__T2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__T3Interrupt) ? ABSOLUTE(__T3Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__T3Interrupt) ? ABSOLUTE(__T3Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__SPI1ErrInterrupt) ? ABSOLUTE(__SPI1ErrInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__SPI1ErrInterrupt) ? ABSOLUTE(__SPI1ErrInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__SPI1Interrupt) ? ABSOLUTE(__SPI1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__SPI1Interrupt) ? ABSOLUTE(__SPI1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__U1RXInterrupt) ? ABSOLUTE(__U1RXInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__U1RXInterrupt) ? ABSOLUTE(__U1RXInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__U1TXInterrupt) ? ABSOLUTE(__U1TXInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__U1TXInterrupt) ? ABSOLUTE(__U1TXInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__ADC1Interrupt) ? ABSOLUTE(__ADC1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__ADC1Interrupt) ? ABSOLUTE(__ADC1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__DMA1Interrupt) ? ABSOLUTE(__DMA1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__DMA1Interrupt) ? ABSOLUTE(__DMA1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt15) ? ABSOLUTE(__Interrupt15) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt15) ? ABSOLUTE(__Interrupt15) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__SI2C1Interrupt) ? ABSOLUTE(__SI2C1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__SI2C1Interrupt) ? ABSOLUTE(__SI2C1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__MI2C1Interrupt) ? ABSOLUTE(__MI2C1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__MI2C1Interrupt) ? ABSOLUTE(__MI2C1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__CMPInterrupt) ? ABSOLUTE(__CMPInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__CMPInterrupt) ? ABSOLUTE(__CMPInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__CNInterrupt) ? ABSOLUTE(__CNInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__CNInterrupt) ? ABSOLUTE(__CNInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__INT1Interrupt) ? ABSOLUTE(__INT1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__INT1Interrupt) ? ABSOLUTE(__INT1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__ADC2Interrupt) ? ABSOLUTE(__ADC2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__ADC2Interrupt) ? ABSOLUTE(__ADC2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__IC7Interrupt) ? ABSOLUTE(__IC7Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__IC7Interrupt) ? ABSOLUTE(__IC7Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__IC8Interrupt) ? ABSOLUTE(__IC8Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__IC8Interrupt) ? ABSOLUTE(__IC8Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__DMA2Interrupt) ? ABSOLUTE(__DMA2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__DMA2Interrupt) ? ABSOLUTE(__DMA2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__OC3Interrupt) ? ABSOLUTE(__OC3Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__OC3Interrupt) ? ABSOLUTE(__OC3Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__OC4Interrupt) ? ABSOLUTE(__OC4Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__OC4Interrupt) ? ABSOLUTE(__OC4Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__T4Interrupt) ? ABSOLUTE(__T4Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__T4Interrupt) ? ABSOLUTE(__T4Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__T5Interrupt) ? ABSOLUTE(__T5Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__T5Interrupt) ? ABSOLUTE(__T5Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__INT2Interrupt) ? ABSOLUTE(__INT2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__INT2Interrupt) ? ABSOLUTE(__INT2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__U2RXInterrupt) ? ABSOLUTE(__U2RXInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__U2RXInterrupt) ? ABSOLUTE(__U2RXInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__U2TXInterrupt) ? ABSOLUTE(__U2TXInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__U2TXInterrupt) ? ABSOLUTE(__U2TXInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__SPI2ErrInterrupt) ? ABSOLUTE(__SPI2ErrInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__SPI2ErrInterrupt) ? ABSOLUTE(__SPI2ErrInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__SPI2Interrupt) ? ABSOLUTE(__SPI2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__SPI2Interrupt) ? ABSOLUTE(__SPI2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__C1RxRdyInterrupt) ? ABSOLUTE(__C1RxRdyInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__C1RxRdyInterrupt) ? ABSOLUTE(__C1RxRdyInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__C1Interrupt) ? ABSOLUTE(__C1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__C1Interrupt) ? ABSOLUTE(__C1Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__DMA3Interrupt) ? ABSOLUTE(__DMA3Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__DMA3Interrupt) ? ABSOLUTE(__DMA3Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__IC3Interrupt) ? ABSOLUTE(__IC3Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__IC3Interrupt) ? ABSOLUTE(__IC3Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__IC4Interrupt) ? ABSOLUTE(__IC4Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__IC4Interrupt) ? ABSOLUTE(__IC4Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__IC5Interrupt) ? ABSOLUTE(__IC5Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__IC5Interrupt) ? ABSOLUTE(__IC5Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__IC6Interrupt) ? ABSOLUTE(__IC6Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__IC6Interrupt) ? ABSOLUTE(__IC6Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__OC5Interrupt) ? ABSOLUTE(__OC5Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__OC5Interrupt) ? ABSOLUTE(__OC5Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__OC6Interrupt) ? ABSOLUTE(__OC6Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__OC6Interrupt) ? ABSOLUTE(__OC6Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__OC7Interrupt) ? ABSOLUTE(__OC7Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__OC7Interrupt) ? ABSOLUTE(__OC7Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__OC8Interrupt) ? ABSOLUTE(__OC8Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__OC8Interrupt) ? ABSOLUTE(__OC8Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__PMPInterrupt) ? ABSOLUTE(__PMPInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__PMPInterrupt) ? ABSOLUTE(__PMPInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__DMA4Interrupt) ? ABSOLUTE(__DMA4Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__DMA4Interrupt) ? ABSOLUTE(__DMA4Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__T6Interrupt) ? ABSOLUTE(__T6Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__T6Interrupt) ? ABSOLUTE(__T6Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__T7Interrupt) ? ABSOLUTE(__T7Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__T7Interrupt) ? ABSOLUTE(__T7Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__SI2C2Interrupt) ? ABSOLUTE(__SI2C2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__SI2C2Interrupt) ? ABSOLUTE(__SI2C2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__MI2C2Interrupt) ? ABSOLUTE(__MI2C2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__MI2C2Interrupt) ? ABSOLUTE(__MI2C2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__T8Interrupt) ? ABSOLUTE(__T8Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__T8Interrupt) ? ABSOLUTE(__T8Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__T9Interrupt) ? ABSOLUTE(__T9Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__T9Interrupt) ? ABSOLUTE(__T9Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__INT3Interrupt) ? ABSOLUTE(__INT3Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__INT3Interrupt) ? ABSOLUTE(__INT3Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__INT4Interrupt) ? ABSOLUTE(__INT4Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__INT4Interrupt) ? ABSOLUTE(__INT4Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__C2RxRdyInterrupt) ? ABSOLUTE(__C2RxRdyInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__C2RxRdyInterrupt) ? ABSOLUTE(__C2RxRdyInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__C2Interrupt) ? ABSOLUTE(__C2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__C2Interrupt) ? ABSOLUTE(__C2Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__PWMInterrupt) ? ABSOLUTE(__PWMInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__PWMInterrupt) ? ABSOLUTE(__PWMInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__QEIInterrupt) ? ABSOLUTE(__QEIInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__QEIInterrupt) ? ABSOLUTE(__QEIInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__DCIErrInterrupt) ? ABSOLUTE(__DCIErrInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__DCIErrInterrupt) ? ABSOLUTE(__DCIErrInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__DCIInterrupt) ? ABSOLUTE(__DCIInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__DCIInterrupt) ? ABSOLUTE(__DCIInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__DMA5Interrupt) ? ABSOLUTE(__DMA5Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__DMA5Interrupt) ? ABSOLUTE(__DMA5Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__RTCCInterrupt) ? ABSOLUTE(__RTCCInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__RTCCInterrupt) ? ABSOLUTE(__RTCCInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__FLTAInterrupt) ? ABSOLUTE(__FLTAInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__FLTAInterrupt) ? ABSOLUTE(__FLTAInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__FLTBInterrupt) ? ABSOLUTE(__FLTBInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__FLTBInterrupt) ? ABSOLUTE(__FLTBInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__U1ErrInterrupt) ? ABSOLUTE(__U1ErrInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__U1ErrInterrupt) ? ABSOLUTE(__U1ErrInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__U2ErrInterrupt) ? ABSOLUTE(__U2ErrInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__U2ErrInterrupt) ? ABSOLUTE(__U2ErrInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__CRCInterrupt) ? ABSOLUTE(__CRCInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__CRCInterrupt) ? ABSOLUTE(__CRCInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__DMA6Interrupt) ? ABSOLUTE(__DMA6Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__DMA6Interrupt) ? ABSOLUTE(__DMA6Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__DMA7Interrupt) ? ABSOLUTE(__DMA7Interrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__DMA7Interrupt) ? ABSOLUTE(__DMA7Interrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__C1TxReqInterrupt) ? ABSOLUTE(__C1TxReqInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__C1TxReqInterrupt) ? ABSOLUTE(__C1TxReqInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__C2TxReqInterrupt) ? ABSOLUTE(__C2TxReqInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__C2TxReqInterrupt) ? ABSOLUTE(__C2TxReqInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt72) ? ABSOLUTE(__Interrupt72) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt72) ? ABSOLUTE(__Interrupt72) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt73) ? ABSOLUTE(__Interrupt73) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt73) ? ABSOLUTE(__Interrupt73) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt74) ? ABSOLUTE(__Interrupt74) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt74) ? ABSOLUTE(__Interrupt74) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt75) ? ABSOLUTE(__Interrupt75) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt75) ? ABSOLUTE(__Interrupt75) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt76) ? ABSOLUTE(__Interrupt76) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt76) ? ABSOLUTE(__Interrupt76) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt77) ? ABSOLUTE(__Interrupt77) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt77) ? ABSOLUTE(__Interrupt77) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__DAC1RInterrupt) ? ABSOLUTE(__DAC1RInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__DAC1RInterrupt) ? ABSOLUTE(__DAC1RInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__DAC1LInterrupt) ? ABSOLUTE(__DAC1LInterrupt) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__DAC1LInterrupt) ? ABSOLUTE(__DAC1LInterrupt) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt80) ? ABSOLUTE(__Interrupt80) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt80) ? ABSOLUTE(__Interrupt80) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt81) ? ABSOLUTE(__Interrupt81) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt81) ? ABSOLUTE(__Interrupt81) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt82) ? ABSOLUTE(__Interrupt82) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt82) ? ABSOLUTE(__Interrupt82) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt83) ? ABSOLUTE(__Interrupt83) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt83) ? ABSOLUTE(__Interrupt83) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt84) ? ABSOLUTE(__Interrupt84) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt84) ? ABSOLUTE(__Interrupt84) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt85) ? ABSOLUTE(__Interrupt85) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt85) ? ABSOLUTE(__Interrupt85) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt86) ? ABSOLUTE(__Interrupt86) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt86) ? ABSOLUTE(__Interrupt86) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt87) ? ABSOLUTE(__Interrupt87) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt87) ? ABSOLUTE(__Interrupt87) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt88) ? ABSOLUTE(__Interrupt88) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt88) ? ABSOLUTE(__Interrupt88) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt89) ? ABSOLUTE(__Interrupt89) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt89) ? ABSOLUTE(__Interrupt89) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt90) ? ABSOLUTE(__Interrupt90) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt90) ? ABSOLUTE(__Interrupt90) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt91) ? ABSOLUTE(__Interrupt91) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt91) ? ABSOLUTE(__Interrupt91) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt92) ? ABSOLUTE(__Interrupt92) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt92) ? ABSOLUTE(__Interrupt92) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt93) ? ABSOLUTE(__Interrupt93) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt93) ? ABSOLUTE(__Interrupt93) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt94) ? ABSOLUTE(__Interrupt94) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt94) ? ABSOLUTE(__Interrupt94) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt95) ? ABSOLUTE(__Interrupt95) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt95) ? ABSOLUTE(__Interrupt95) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt96) ? ABSOLUTE(__Interrupt96) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt96) ? ABSOLUTE(__Interrupt96) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt97) ? ABSOLUTE(__Interrupt97) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt97) ? ABSOLUTE(__Interrupt97) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt98) ? ABSOLUTE(__Interrupt98) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt98) ? ABSOLUTE(__Interrupt98) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt99) ? ABSOLUTE(__Interrupt99) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt99) ? ABSOLUTE(__Interrupt99) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt100) ? ABSOLUTE(__Interrupt100) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt100) ? ABSOLUTE(__Interrupt100) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt101) ? ABSOLUTE(__Interrupt101) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt101) ? ABSOLUTE(__Interrupt101) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt102) ? ABSOLUTE(__Interrupt102) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt102) ? ABSOLUTE(__Interrupt102) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt103) ? ABSOLUTE(__Interrupt103) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt103) ? ABSOLUTE(__Interrupt103) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt104) ? ABSOLUTE(__Interrupt104) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt104) ? ABSOLUTE(__Interrupt104) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt105) ? ABSOLUTE(__Interrupt105) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt105) ? ABSOLUTE(__Interrupt105) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt106) ? ABSOLUTE(__Interrupt106) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt106) ? ABSOLUTE(__Interrupt106) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt107) ? ABSOLUTE(__Interrupt107) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt107) ? ABSOLUTE(__Interrupt107) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt108) ? ABSOLUTE(__Interrupt108) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt108) ? ABSOLUTE(__Interrupt108) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt109) ? ABSOLUTE(__Interrupt109) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt109) ? ABSOLUTE(__Interrupt109) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt110) ? ABSOLUTE(__Interrupt110) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt110) ? ABSOLUTE(__Interrupt110) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt111) ? ABSOLUTE(__Interrupt111) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt111) ? ABSOLUTE(__Interrupt111) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt112) ? ABSOLUTE(__Interrupt112) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt112) ? ABSOLUTE(__Interrupt112) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt113) ? ABSOLUTE(__Interrupt113) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt113) ? ABSOLUTE(__Interrupt113) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt114) ? ABSOLUTE(__Interrupt114) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt114) ? ABSOLUTE(__Interrupt114) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt115) ? ABSOLUTE(__Interrupt115) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt115) ? ABSOLUTE(__Interrupt115) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt116) ? ABSOLUTE(__Interrupt116) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt116) ? ABSOLUTE(__Interrupt116) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

    SHORT(DEFINED(__Interrupt117) ? ABSOLUTE(__Interrupt117) : 
     ABSOLUTE(__DefaultInterrupt));
     SHORT(0x04);
    SHORT(((DEFINED(__Interrupt117) ? ABSOLUTE(__Interrupt117) : 
     ABSOLUTE(__DefaultInterrupt)) >> 16) & 0x7F);
     SHORT(0);

 } >j_ivt


  /*
  ** User Code and Library Code
  **
  ** This section must not be assigned to __CODE_BASE,
  ** because CodeGuard(tm) sections may be located there.
  **
  ** Note that input sections *(.text) are not mapped here.
  ** The best-fit allocator locates them, so that .text
  ** may flow around PSV sections as needed.
  */
  .text :
  {
        *(.init);
        *(.user_init);
        KEEP (*(.handle));
        KEEP (*(.isr*));
        *(.libc) *(.libm) *(.libdsp);  /* keep together in this order */
        *(.lib*);
  } >program


  /*
  ** User-Defined Section in Program Memory
  **
  ** note: can specify an address using
  **       the following syntax:
  **
  **       usercode 0x1234 :
  **         {
  **           *(usercode);
  **         } >program
  */
  usercode :
  {
        *(usercode);
  } >program


  /*
  ** User-Defined Constants in Program Memory
  **
  ** For PSV type sections, the Load Memory Address (LMA)
  ** should be specified as follows:
  **
  **       userconst : AT(0x1234)
  **         {
  **           *(userconst);
  **         } >program
  **
  ** Note that mapping PSV sections in linker scripts
  ** is not generally recommended.
  **
  ** Because of page alignment restrictions, memory is
  ** often used more efficiently when PSV sections
  ** do not appear in the linker script.
  **
  ** For more information on memory allocation,
  ** please refer to chapter 10, 'Linker Processing'
  ** in the Assembler, Linker manual (DS51317).
  */


  /*
  ** Configuration Words
  */
  __FBS :
  { KEEP (*(__FBS.sec*))    } >FBS
  __FSS :
  { KEEP (*(__FSS.sec*))    } >FSS
  __FGS :
  { KEEP (*(__FGS.sec*))    } >FGS
  __FOSCSEL :
  { KEEP (*(__FOSCSEL.sec*))    } >FOSCSEL
  __FOSC :
  { KEEP (*(__FOSC.sec*))    } >FOSC
  __FWDT :
  { KEEP (*(__FWDT.sec*))    } >FWDT
  __FPOR :
  { KEEP (*(__FPOR.sec*))    } >FPOR
  __FICD :
  { KEEP (*(__FICD.sec*))    } >FICD
  __FUID0 :
  { KEEP (*(__FUID0.sec*))    } >FUID0
  __FUID1 :
  { KEEP (*(__FUID1.sec*))    } >FUID1
  __FUID2 :
  { KEEP (*(__FUID2.sec*))    } >FUID2
  __FUID3 :
  { KEEP (*(__FUID3.sec*))    } >FUID3






  /*
  ** =========== Data Memory ===========
  */


  /*
  ** ICD Debug Exec
  **
  ** This section provides optional storage for
  ** the ICD2 debugger. Define a global symbol
  ** named __ICD2RAM to enable ICD2. This section
  ** must be loaded at data address 0x800.
  */
  .icd __DATA_BASE (NOLOAD):
  {
    . += (DEFINED (__ICD2RAM) ? 0x50 : 0 );
  } > data


  /*
  ** Other sections in data memory are not explicitly mapped.
  ** Instead they are allocated according to their section
  ** attributes, which is most efficient.
  ** 
  ** If a specific arrangement of sections is required
  ** (other than what can be achieved using attributes)
  ** additional sections may be defined here. See chapter
  ** 10.5 in the MPLAB ASM30/LINK30 User's Guide (DS51317)
  ** for more information.
  */


  /*
  ** ========== Debug Info ==============
  */

  .comment        0 : { *(.comment) }

  /*
  ** DWARF-2
  */
  .debug_info     0 : { *(.debug_info) *(.gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  .debug_ranges   0 : { *(.debug_ranges) }
  .debug_aranges  0 : { *(.debug_aranges) }

} /* SECTIONS */

/*
** ================= End of Section Map ================
*/

#if 1  /* Always include the IVT. Was: #if __XC16_VERSION < 1026 */
/*
** These definitions are not required for XC16 versions
** later than XC16 v1.25 as the linker defines the addresses.
**
** These definitons will cause a link error on a newer compiler
**
*/
/*
** Section Map for Interrupt Vector Tables
*/
SECTIONS
{

/*
** Interrupt Vector Table
*/
.ivt __IVT_BASE :
{
LONG(J__ReservedTrap0);
LONG(J__OscillatorFail);
LONG(J__AddressError);
LONG(J__StackError);
LONG(J__MathError);
LONG(J__DMACError);
LONG(J__ReservedTrap6);
LONG(J__ReservedTrap7);
LONG(J__INT0Interrupt);
LONG(J__IC1Interrupt);
LONG(J__OC1Interrupt);
LONG(J__T1Interrupt);
LONG(J__DMA0Interrupt);
LONG(J__IC2Interrupt);
LONG(J__OC2Interrupt);
LONG(J__T2Interrupt);
LONG(J__T3Interrupt);
LONG(J__SPI1ErrInterrupt);
LONG(J__SPI1Interrupt);
LONG(J__U1RXInterrupt);
LONG(J__U1TXInterrupt);
LONG(J__ADC1Interrupt);
LONG(J__DMA1Interrupt);
LONG(J__Interrupt15);
LONG(J__SI2C1Interrupt);
LONG(J__MI2C1Interrupt);
LONG(J__CMPInterrupt);
LONG(J__CNInterrupt);
LONG(J__INT1Interrupt);
LONG(J__ADC2Interrupt);
LONG(J__IC7Interrupt);
LONG(J__IC8Interrupt);
LONG(J__DMA2Interrupt);
LONG(J__OC3Interrupt);
LONG(J__OC4Interrupt);
LONG(J__T4Interrupt);
LONG(J__T5Interrupt);
LONG(J__INT2Interrupt);
LONG(J__U2RXInterrupt);
LONG(J__U2TXInterrupt);
LONG(J__SPI2ErrInterrupt);
LONG(J__SPI2Interrupt);
LONG(J__C1RxRdyInterrupt);
LONG(J__C1Interrupt);
LONG(J__DMA3Interrupt);
LONG(J__IC3Interrupt);
LONG(J__IC4Interrupt);
LONG(J__IC5Interrupt);
LONG(J__IC6Interrupt);
LONG(J__OC5Interrupt);
LONG(J__OC6Interrupt);
LONG(J__OC7Interrupt);
LONG(J__OC8Interrupt);
LONG(J__PMPInterrupt);
LONG(J__DMA4Interrupt);
LONG(J__T6Interrupt);
LONG(J__T7Interrupt);
LONG(J__SI2C2Interrupt);
LONG(J__MI2C2Interrupt);
LONG(J__T8Interrupt);
LONG(J__T9Interrupt);
LONG(J__INT3Interrupt);
LONG(J__INT4Interrupt);
LONG(J__C2RxRdyInterrupt);
LONG(J__C2Interrupt);
LONG(J__PWMInterrupt);
LONG(J__QEIInterrupt);
LONG(J__DCIErrInterrupt);
LONG(J__DCIInterrupt);
LONG(J__DMA5Interrupt);
LONG(J__RTCCInterrupt);
LONG(J__FLTAInterrupt);
LONG(J__FLTBInterrupt);
LONG(J__U1ErrInterrupt);
LONG(J__U2ErrInterrupt);
LONG(J__CRCInterrupt);
LONG(J__DMA6Interrupt);
LONG(J__DMA7Interrupt);
LONG(J__C1TxReqInterrupt);
LONG(J__C2TxReqInterrupt);
LONG(J__Interrupt72);
LONG(J__Interrupt73);
LONG(J__Interrupt74);
LONG(J__Interrupt75);
LONG(J__Interrupt76);
LONG(J__Interrupt77);
LONG(J__DAC1RInterrupt);
LONG(J__DAC1LInterrupt);
LONG(J__Interrupt80);
LONG(J__Interrupt81);
LONG(J__Interrupt82);
LONG(J__Interrupt83);
LONG(J__Interrupt84);
LONG(J__Interrupt85);
LONG(J__Interrupt86);
LONG(J__Interrupt87);
LONG(J__Interrupt88);
LONG(J__Interrupt89);
LONG(J__Interrupt90);
LONG(J__Interrupt91);
LONG(J__Interrupt92);
LONG(J__Interrupt93);
LONG(J__Interrupt94);
LONG(J__Interrupt95);
LONG(J__Interrupt96);
LONG(J__Interrupt97);
LONG(J__Interrupt98);
LONG(J__Interrupt99);
LONG(J__Interrupt100);
LONG(J__Interrupt101);
LONG(J__Interrupt102);
LONG(J__Interrupt103);
LONG(J__Interrupt104);
LONG(J__Interrupt105);
LONG(J__Interrupt106);
LONG(J__Interrupt107);
LONG(J__Interrupt108);
LONG(J__Interrupt109);
LONG(J__Interrupt110);
LONG(J__Interrupt111);
LONG(J__Interrupt112);
LONG(J__Interrupt113);
LONG(J__Interrupt114);
LONG(J__Interrupt115);
LONG(J__Interrupt116);
LONG(J__Interrupt117);
  } >ivt


/*
** Alternate Interrupt Vector Table
*/
.aivt __AIVT_BASE :
{
LONG(J__ReservedTrap0);
LONG(J__OscillatorFail);
LONG(J__AddressError);
LONG(J__StackError);
LONG(J__MathError);
LONG(J__DMACError);
LONG(J__ReservedTrap6);
LONG(J__ReservedTrap7);
LONG(J__INT0Interrupt);
LONG(J__IC1Interrupt);
LONG(J__OC1Interrupt);
LONG(J__T1Interrupt);
LONG(J__DMA0Interrupt);
LONG(J__IC2Interrupt);
LONG(J__OC2Interrupt);
LONG(J__T2Interrupt);
LONG(J__T3Interrupt);
LONG(J__SPI1ErrInterrupt);
LONG(J__SPI1Interrupt);
LONG(J__U1RXInterrupt);
LONG(J__U1TXInterrupt);
LONG(J__ADC1Interrupt);
LONG(J__DMA1Interrupt);
LONG(J__Interrupt15);
LONG(J__SI2C1Interrupt);
LONG(J__MI2C1Interrupt);
LONG(J__CMPInterrupt);
LONG(J__CNInterrupt);
LONG(J__INT1Interrupt);
LONG(J__ADC2Interrupt);
LONG(J__IC7Interrupt);
LONG(J__IC8Interrupt);
LONG(J__DMA2Interrupt);
LONG(J__OC3Interrupt);
LONG(J__OC4Interrupt);
LONG(J__T4Interrupt);
LONG(J__T5Interrupt);
LONG(J__INT2Interrupt);
LONG(J__U2RXInterrupt);
LONG(J__U2TXInterrupt);
LONG(J__SPI2ErrInterrupt);
LONG(J__SPI2Interrupt);
LONG(J__C1RxRdyInterrupt);
LONG(J__C1Interrupt);
LONG(J__DMA3Interrupt);
LONG(J__IC3Interrupt);
LONG(J__IC4Interrupt);
LONG(J__IC5Interrupt);
LONG(J__IC6Interrupt);
LONG(J__OC5Interrupt);
LONG(J__OC6Interrupt);
LONG(J__OC7Interrupt);
LONG(J__OC8Interrupt);
LONG(J__PMPInterrupt);
LONG(J__DMA4Interrupt);
LONG(J__T6Interrupt);
LONG(J__T7Interrupt);
LONG(J__SI2C2Interrupt);
LONG(J__MI2C2Interrupt);
LONG(J__T8Interrupt);
LONG(J__T9Interrupt);
LONG(J__INT3Interrupt);
LONG(J__INT4Interrupt);
LONG(J__C2RxRdyInterrupt);
LONG(J__C2Interrupt);
LONG(J__PWMInterrupt);
LONG(J__QEIInterrupt);
LONG(J__DCIErrInterrupt);
LONG(J__DCIInterrupt);
LONG(J__DMA5Interrupt);
LONG(J__RTCCInterrupt);
LONG(J__FLTAInterrupt);
LONG(J__FLTBInterrupt);
LONG(J__U1ErrInterrupt);
LONG(J__U2ErrInterrupt);
LONG(J__CRCInterrupt);
LONG(J__DMA6Interrupt);
LONG(J__DMA7Interrupt);
LONG(J__C1TxReqInterrupt);
LONG(J__C2TxReqInterrupt);
LONG(J__Interrupt72);
LONG(J__Interrupt73);
LONG(J__Interrupt74);
LONG(J__Interrupt75);
LONG(J__Interrupt76);
LONG(J__Interrupt77);
LONG(J__DAC1RInterrupt);
LONG(J__DAC1LInterrupt);
LONG(J__Interrupt80);
LONG(J__Interrupt81);
LONG(J__Interrupt82);
LONG(J__Interrupt83);
LONG(J__Interrupt84);
LONG(J__Interrupt85);
LONG(J__Interrupt86);
LONG(J__Interrupt87);
LONG(J__Interrupt88);
LONG(J__Interrupt89);
LONG(J__Interrupt90);
LONG(J__Interrupt91);
LONG(J__Interrupt92);
LONG(J__Interrupt93);
LONG(J__Interrupt94);
LONG(J__Interrupt95);
LONG(J__Interrupt96);
LONG(J__Interrupt97);
LONG(J__Interrupt98);
LONG(J__Interrupt99);
LONG(J__Interrupt100);
LONG(J__Interrupt101);
LONG(J__Interrupt102);
LONG(J__Interrupt103);
LONG(J__Interrupt104);
LONG(J__Interrupt105);
LONG(J__Interrupt106);
LONG(J__Interrupt107);
LONG(J__Interrupt108);
LONG(J__Interrupt109);
LONG(J__Interrupt110);
LONG(J__Interrupt111);
LONG(J__Interrupt112);
LONG(J__Interrupt113);
LONG(J__Interrupt114);
LONG(J__Interrupt115);
LONG(J__Interrupt116);
LONG(J__Interrupt117);
  } >aivt
} /* SECTIONS */
#endif


/*
** ============== Equates for SFR Addresses =============
*/

 WREG0        = 0x0;
_WREG0        = 0x0;
 WREG1        = 0x2;
_WREG1        = 0x2;
 WREG2        = 0x4;
_WREG2        = 0x4;
 WREG3        = 0x6;
_WREG3        = 0x6;
 WREG4        = 0x8;
_WREG4        = 0x8;
 WREG5        = 0xA;
_WREG5        = 0xA;
 WREG6        = 0xC;
_WREG6        = 0xC;
 WREG7        = 0xE;
_WREG7        = 0xE;
 WREG8        = 0x10;
_WREG8        = 0x10;
 WREG9        = 0x12;
_WREG9        = 0x12;
 WREG10       = 0x14;
_WREG10       = 0x14;
 WREG11       = 0x16;
_WREG11       = 0x16;
 WREG12       = 0x18;
_WREG12       = 0x18;
 WREG13       = 0x1A;
_WREG13       = 0x1A;
 WREG14       = 0x1C;
_WREG14       = 0x1C;
 WREG15       = 0x1E;
_WREG15       = 0x1E;
 SPLIM        = 0x20;
_SPLIM        = 0x20;
 ACCAL        = 0x22;
_ACCAL        = 0x22;
 ACCAH        = 0x24;
_ACCAH        = 0x24;
 ACCAU        = 0x26;
_ACCAU        = 0x26;
 ACCBL        = 0x28;
_ACCBL        = 0x28;
 ACCBH        = 0x2A;
_ACCBH        = 0x2A;
 ACCBU        = 0x2C;
_ACCBU        = 0x2C;
 PCL          = 0x2E;
_PCL          = 0x2E;
 PCH          = 0x30;
_PCH          = 0x30;
 TBLPAG       = 0x32;
_TBLPAG       = 0x32;
 PSVPAG       = 0x34;
_PSVPAG       = 0x34;
 RCOUNT       = 0x36;
_RCOUNT       = 0x36;
 DCOUNT       = 0x38;
_DCOUNT       = 0x38;
 DOSTARTL     = 0x3A;
_DOSTARTL     = 0x3A;
 DOSTARTH     = 0x3C;
_DOSTARTH     = 0x3C;
 DOENDL       = 0x3E;
_DOENDL       = 0x3E;
 DOENDH       = 0x40;
_DOENDH       = 0x40;
 SR           = 0x42;
_SR           = 0x42;
_SRbits       = 0x42;
 CORCON       = 0x44;
_CORCON       = 0x44;
_CORCONbits   = 0x44;
 MODCON       = 0x46;
_MODCON       = 0x46;
_MODCONbits   = 0x46;
 XMODSRT      = 0x48;
_XMODSRT      = 0x48;
 XMODEND      = 0x4A;
_XMODEND      = 0x4A;
 YMODSRT      = 0x4C;
_YMODSRT      = 0x4C;
 YMODEND      = 0x4E;
_YMODEND      = 0x4E;
 XBREV        = 0x50;
_XBREV        = 0x50;
_XBREVbits    = 0x50;
 DISICNT      = 0x52;
_DISICNT      = 0x52;
 CNEN1        = 0x60;
_CNEN1        = 0x60;
_CNEN1bits    = 0x60;
 CNEN2        = 0x62;
_CNEN2        = 0x62;
_CNEN2bits    = 0x62;
 CNPU1        = 0x68;
_CNPU1        = 0x68;
_CNPU1bits    = 0x68;
 CNPU2        = 0x6A;
_CNPU2        = 0x6A;
_CNPU2bits    = 0x6A;
 INTCON1      = 0x80;
_INTCON1      = 0x80;
_INTCON1bits  = 0x80;
 INTCON2      = 0x82;
_INTCON2      = 0x82;
_INTCON2bits  = 0x82;
 IFS0         = 0x84;
_IFS0         = 0x84;
_IFS0bits     = 0x84;
 IFS1         = 0x86;
_IFS1         = 0x86;
_IFS1bits     = 0x86;
 IFS2         = 0x88;
_IFS2         = 0x88;
_IFS2bits     = 0x88;
 IFS3         = 0x8A;
_IFS3         = 0x8A;
_IFS3bits     = 0x8A;
 IFS4         = 0x8C;
_IFS4         = 0x8C;
_IFS4bits     = 0x8C;
 IEC0         = 0x94;
_IEC0         = 0x94;
_IEC0bits     = 0x94;
 IEC1         = 0x96;
_IEC1         = 0x96;
_IEC1bits     = 0x96;
 IEC2         = 0x98;
_IEC2         = 0x98;
_IEC2bits     = 0x98;
 IEC3         = 0x9A;
_IEC3         = 0x9A;
_IEC3bits     = 0x9A;
 IEC4         = 0x9C;
_IEC4         = 0x9C;
_IEC4bits     = 0x9C;
 IPC0         = 0xA4;
_IPC0         = 0xA4;
_IPC0bits     = 0xA4;
 IPC1         = 0xA6;
_IPC1         = 0xA6;
_IPC1bits     = 0xA6;
 IPC2         = 0xA8;
_IPC2         = 0xA8;
_IPC2bits     = 0xA8;
 IPC3         = 0xAA;
_IPC3         = 0xAA;
_IPC3bits     = 0xAA;
 IPC4         = 0xAC;
_IPC4         = 0xAC;
_IPC4bits     = 0xAC;
 IPC5         = 0xAE;
_IPC5         = 0xAE;
_IPC5bits     = 0xAE;
 IPC6         = 0xB0;
_IPC6         = 0xB0;
_IPC6bits     = 0xB0;
 IPC7         = 0xB2;
_IPC7         = 0xB2;
_IPC7bits     = 0xB2;
 IPC8         = 0xB4;
_IPC8         = 0xB4;
_IPC8bits     = 0xB4;
 IPC9         = 0xB6;
_IPC9         = 0xB6;
_IPC9bits     = 0xB6;
 IPC10        = 0xB8;
_IPC10        = 0xB8;
_IPC10bits    = 0xB8;
 IPC11        = 0xBA;
_IPC11        = 0xBA;
_IPC11bits    = 0xBA;
 IPC12        = 0xBC;
_IPC12        = 0xBC;
_IPC12bits    = 0xBC;
 IPC13        = 0xBE;
_IPC13        = 0xBE;
_IPC13bits    = 0xBE;
 IPC14        = 0xC0;
_IPC14        = 0xC0;
_IPC14bits    = 0xC0;
 IPC15        = 0xC2;
_IPC15        = 0xC2;
_IPC15bits    = 0xC2;
 IPC16        = 0xC4;
_IPC16        = 0xC4;
_IPC16bits    = 0xC4;
 IPC17        = 0xC6;
_IPC17        = 0xC6;
_IPC17bits    = 0xC6;
 INTTREG      = 0xE0;
_INTTREG      = 0xE0;
_INTTREGbits  = 0xE0;
 TMR1         = 0x100;
_TMR1         = 0x100;
 PR1          = 0x102;
_PR1          = 0x102;
 T1CON        = 0x104;
_T1CON        = 0x104;
_T1CONbits    = 0x104;
 TMR2         = 0x106;
_TMR2         = 0x106;
 TMR3HLD      = 0x108;
_TMR3HLD      = 0x108;
 TMR3         = 0x10A;
_TMR3         = 0x10A;
 PR2          = 0x10C;
_PR2          = 0x10C;
 PR3          = 0x10E;
_PR3          = 0x10E;
 T2CON        = 0x110;
_T2CON        = 0x110;
_T2CONbits    = 0x110;
 T3CON        = 0x112;
_T3CON        = 0x112;
_T3CONbits    = 0x112;
 TMR4         = 0x114;
_TMR4         = 0x114;
 TMR5HLD      = 0x116;
_TMR5HLD      = 0x116;
 TMR5         = 0x118;
_TMR5         = 0x118;
 PR4          = 0x11A;
_PR4          = 0x11A;
 PR5          = 0x11C;
_PR5          = 0x11C;
 T4CON        = 0x11E;
_T4CON        = 0x11E;
_T4CONbits    = 0x11E;
 T5CON        = 0x120;
_T5CON        = 0x120;
_T5CONbits    = 0x120;
 TMR6         = 0x122;
_TMR6         = 0x122;
 TMR7HLD      = 0x124;
_TMR7HLD      = 0x124;
 TMR7         = 0x126;
_TMR7         = 0x126;
 PR6          = 0x128;
_PR6          = 0x128;
 PR7          = 0x12A;
_PR7          = 0x12A;
 T6CON        = 0x12C;
_T6CON        = 0x12C;
_T6CONbits    = 0x12C;
 T7CON        = 0x12E;
_T7CON        = 0x12E;
_T7CONbits    = 0x12E;
 TMR8         = 0x130;
_TMR8         = 0x130;
 TMR9HLD      = 0x132;
_TMR9HLD      = 0x132;
 TMR9         = 0x134;
_TMR9         = 0x134;
 PR8          = 0x136;
_PR8          = 0x136;
 PR9          = 0x138;
_PR9          = 0x138;
 T8CON        = 0x13A;
_T8CON        = 0x13A;
_T8CONbits    = 0x13A;
 T9CON        = 0x13C;
_T9CON        = 0x13C;
_T9CONbits    = 0x13C;
 IC1BUF       = 0x140;
_IC1BUF       = 0x140;
 IC1CON       = 0x142;
_IC1CON       = 0x142;
_IC1CONbits   = 0x142;
 IC2BUF       = 0x144;
_IC2BUF       = 0x144;
 IC2CON       = 0x146;
_IC2CON       = 0x146;
_IC2CONbits   = 0x146;
 IC3BUF       = 0x148;
_IC3BUF       = 0x148;
 IC3CON       = 0x14A;
_IC3CON       = 0x14A;
_IC3CONbits   = 0x14A;
 IC4BUF       = 0x14C;
_IC4BUF       = 0x14C;
 IC4CON       = 0x14E;
_IC4CON       = 0x14E;
_IC4CONbits   = 0x14E;
 IC5BUF       = 0x150;
_IC5BUF       = 0x150;
 IC5CON       = 0x152;
_IC5CON       = 0x152;
_IC5CONbits   = 0x152;
 IC6BUF       = 0x154;
_IC6BUF       = 0x154;
 IC6CON       = 0x156;
_IC6CON       = 0x156;
_IC6CONbits   = 0x156;
 IC7BUF       = 0x158;
_IC7BUF       = 0x158;
 IC7CON       = 0x15A;
_IC7CON       = 0x15A;
_IC7CONbits   = 0x15A;
 IC8BUF       = 0x15C;
_IC8BUF       = 0x15C;
 IC8CON       = 0x15E;
_IC8CON       = 0x15E;
_IC8CONbits   = 0x15E;
 OC1RS        = 0x180;
_OC1RS        = 0x180;
 OC1R         = 0x182;
_OC1R         = 0x182;
 OC1CON       = 0x184;
_OC1CON       = 0x184;
_OC1CONbits   = 0x184;
 OC2RS        = 0x186;
_OC2RS        = 0x186;
 OC2R         = 0x188;
_OC2R         = 0x188;
 OC2CON       = 0x18A;
_OC2CON       = 0x18A;
_OC2CONbits   = 0x18A;
 OC3RS        = 0x18C;
_OC3RS        = 0x18C;
 OC3R         = 0x18E;
_OC3R         = 0x18E;
 OC3CON       = 0x190;
_OC3CON       = 0x190;
_OC3CONbits   = 0x190;
 OC4RS        = 0x192;
_OC4RS        = 0x192;
 OC4R         = 0x194;
_OC4R         = 0x194;
 OC4CON       = 0x196;
_OC4CON       = 0x196;
_OC4CONbits   = 0x196;
 OC5RS        = 0x198;
_OC5RS        = 0x198;
 OC5R         = 0x19A;
_OC5R         = 0x19A;
 OC5CON       = 0x19C;
_OC5CON       = 0x19C;
_OC5CONbits   = 0x19C;
 OC6RS        = 0x19E;
_OC6RS        = 0x19E;
 OC6R         = 0x1A0;
_OC6R         = 0x1A0;
 OC6CON       = 0x1A2;
_OC6CON       = 0x1A2;
_OC6CONbits   = 0x1A2;
 OC7RS        = 0x1A4;
_OC7RS        = 0x1A4;
 OC7R         = 0x1A6;
_OC7R         = 0x1A6;
 OC7CON       = 0x1A8;
_OC7CON       = 0x1A8;
_OC7CONbits   = 0x1A8;
 OC8RS        = 0x1AA;
_OC8RS        = 0x1AA;
 OC8R         = 0x1AC;
_OC8R         = 0x1AC;
 OC8CON       = 0x1AE;
_OC8CON       = 0x1AE;
_OC8CONbits   = 0x1AE;
 P1TCON       = 0x1C0;
_P1TCON       = 0x1C0;
_P1TCONbits   = 0x1C0;
 PTCON        = 0x1C0;
_PTCON        = 0x1C0;
_PTCONbits    = 0x1C0;
 P1TMR        = 0x1C2;
_P1TMR        = 0x1C2;
_P1TMRbits    = 0x1C2;
 PTMR         = 0x1C2;
_PTMR         = 0x1C2;
_PTMRbits     = 0x1C2;
 P1TPER       = 0x1C4;
_P1TPER       = 0x1C4;
_P1TPERbits   = 0x1C4;
 PTPER        = 0x1C4;
_PTPER        = 0x1C4;
_PTPERbits    = 0x1C4;
 P1SECMP      = 0x1C6;
_P1SECMP      = 0x1C6;
_P1SECMPbits  = 0x1C6;
 SEVTCMP      = 0x1C6;
_SEVTCMP      = 0x1C6;
_SEVTCMPbits  = 0x1C6;
 PWM1CON1     = 0x1C8;
_PWM1CON1     = 0x1C8;
_PWM1CON1bits = 0x1C8;
 PWMCON1      = 0x1C8;
_PWMCON1      = 0x1C8;
_PWMCON1bits  = 0x1C8;
 PWM1CON2     = 0x1CA;
_PWM1CON2     = 0x1CA;
_PWM1CON2bits = 0x1CA;
 PWMCON2      = 0x1CA;
_PWMCON2      = 0x1CA;
_PWMCON2bits  = 0x1CA;
 DTCON1       = 0x1CC;
_DTCON1       = 0x1CC;
_DTCON1bits   = 0x1CC;
 P1DTCON1     = 0x1CC;
_P1DTCON1     = 0x1CC;
_P1DTCON1bits = 0x1CC;
 DTCON2       = 0x1CE;
_DTCON2       = 0x1CE;
_DTCON2bits   = 0x1CE;
 P1DTCON2     = 0x1CE;
_P1DTCON2     = 0x1CE;
_P1DTCON2bits = 0x1CE;
 FLTACON      = 0x1D0;
_FLTACON      = 0x1D0;
_FLTACONbits  = 0x1D0;
 P1FLTACON    = 0x1D0;
_P1FLTACON    = 0x1D0;
_P1FLTACONbits = 0x1D0;
 FLTBCON      = 0x1D2;
_FLTBCON      = 0x1D2;
_FLTBCONbits  = 0x1D2;
 P1FLTBCON    = 0x1D2;
_P1FLTBCON    = 0x1D2;
_P1FLTBCONbits = 0x1D2;
 OVDCON       = 0x1D4;
_OVDCON       = 0x1D4;
_OVDCONbits   = 0x1D4;
 P1OVDCON     = 0x1D4;
_P1OVDCON     = 0x1D4;
_P1OVDCONbits = 0x1D4;
 P1DC1        = 0x1D6;
_P1DC1        = 0x1D6;
 PDC1         = 0x1D6;
_PDC1         = 0x1D6;
 P1DC2        = 0x1D8;
_P1DC2        = 0x1D8;
 PDC2         = 0x1D8;
_PDC2         = 0x1D8;
 P1DC3        = 0x1DA;
_P1DC3        = 0x1DA;
 PDC3         = 0x1DA;
_PDC3         = 0x1DA;
 P1DC4        = 0x1DC;
_P1DC4        = 0x1DC;
 PDC4         = 0x1DC;
_PDC4         = 0x1DC;
 QEI1CON      = 0x1E0;
_QEI1CON      = 0x1E0;
_QEI1CONbits  = 0x1E0;
 QEICON       = 0x1E0;
_QEICON       = 0x1E0;
_QEICONbits   = 0x1E0;
 DFLT1CON     = 0x1E2;
_DFLT1CON     = 0x1E2;
_DFLT1CONbits = 0x1E2;
 DFLTCON      = 0x1E2;
_DFLTCON      = 0x1E2;
_DFLTCONbits  = 0x1E2;
 POS1CNT      = 0x1E4;
_POS1CNT      = 0x1E4;
 POSCNT       = 0x1E4;
_POSCNT       = 0x1E4;
 MAX1CNT      = 0x1E6;
_MAX1CNT      = 0x1E6;
 MAXCNT       = 0x1E6;
_MAXCNT       = 0x1E6;
 I2C1RCV      = 0x200;
_I2C1RCV      = 0x200;
 I2CRCV       = 0x200;
_I2CRCV       = 0x200;
 I2C1TRN      = 0x202;
_I2C1TRN      = 0x202;
 I2CTRN       = 0x202;
_I2CTRN       = 0x202;
 I2C1BRG      = 0x204;
_I2C1BRG      = 0x204;
 I2C1CON      = 0x206;
_I2C1CON      = 0x206;
_I2C1CONbits  = 0x206;
 I2CCON       = 0x206;
_I2CCON       = 0x206;
_I2CCONbits   = 0x206;
 I2C1STAT     = 0x208;
_I2C1STAT     = 0x208;
_I2C1STATbits = 0x208;
 I2CSTAT      = 0x208;
_I2CSTAT      = 0x208;
_I2CSTATbits  = 0x208;
 I2C1ADD      = 0x20A;
_I2C1ADD      = 0x20A;
 I2CADD       = 0x20A;
_I2CADD       = 0x20A;
 I2C1MSK      = 0x20C;
_I2C1MSK      = 0x20C;
 I2C2RCV      = 0x210;
_I2C2RCV      = 0x210;
 I2C2TRN      = 0x212;
_I2C2TRN      = 0x212;
 I2C2BRG      = 0x214;
_I2C2BRG      = 0x214;
 I2C2CON      = 0x216;
_I2C2CON      = 0x216;
_I2C2CONbits  = 0x216;
 I2C2STAT     = 0x218;
_I2C2STAT     = 0x218;
_I2C2STATbits = 0x218;
 I2C2ADD      = 0x21A;
_I2C2ADD      = 0x21A;
 I2C2MSK      = 0x21C;
_I2C2MSK      = 0x21C;
 U1MODE       = 0x220;
_U1MODE       = 0x220;
_U1MODEbits   = 0x220;
 U1STA        = 0x222;
_U1STA        = 0x222;
_U1STAbits    = 0x222;
 U1TXREG      = 0x224;
_U1TXREG      = 0x224;
_U1TXREGbits  = 0x224;
 U1RXREG      = 0x226;
_U1RXREG      = 0x226;
_U1RXREGbits  = 0x226;
 U1BRG        = 0x228;
_U1BRG        = 0x228;
 U2MODE       = 0x230;
_U2MODE       = 0x230;
_U2MODEbits   = 0x230;
 U2STA        = 0x232;
_U2STA        = 0x232;
_U2STAbits    = 0x232;
 U2TXREG      = 0x234;
_U2TXREG      = 0x234;
_U2TXREGbits  = 0x234;
 U2RXREG      = 0x236;
_U2RXREG      = 0x236;
_U2RXREGbits  = 0x236;
 U2BRG        = 0x238;
_U2BRG        = 0x238;
 SPI1STAT     = 0x240;
_SPI1STAT     = 0x240;
_SPI1STATbits = 0x240;
 SPI1CON1     = 0x242;
_SPI1CON1     = 0x242;
_SPI1CON1bits = 0x242;
 SPI1CON2     = 0x244;
_SPI1CON2     = 0x244;
_SPI1CON2bits = 0x244;
 SPI1BUF      = 0x248;
_SPI1BUF      = 0x248;
 SPI2STAT     = 0x260;
_SPI2STAT     = 0x260;
_SPI2STATbits = 0x260;
 SPI2CON1     = 0x262;
_SPI2CON1     = 0x262;
_SPI2CON1bits = 0x262;
 SPI2CON2     = 0x264;
_SPI2CON2     = 0x264;
_SPI2CON2bits = 0x264;
 SPI2BUF      = 0x268;
_SPI2BUF      = 0x268;
 TRISA        = 0x2C0;
_TRISA        = 0x2C0;
_TRISAbits    = 0x2C0;
 PORTA        = 0x2C2;
_PORTA        = 0x2C2;
_PORTAbits    = 0x2C2;
 LATA         = 0x2C4;
_LATA         = 0x2C4;
_LATAbits     = 0x2C4;
 TRISB        = 0x2C6;
_TRISB        = 0x2C6;
_TRISBbits    = 0x2C6;
 PORTB        = 0x2C8;
_PORTB        = 0x2C8;
_PORTBbits    = 0x2C8;
 LATB         = 0x2CA;
_LATB         = 0x2CA;
_LATBbits     = 0x2CA;
 TRISC        = 0x2CC;
_TRISC        = 0x2CC;
_TRISCbits    = 0x2CC;
 PORTC        = 0x2CE;
_PORTC        = 0x2CE;
_PORTCbits    = 0x2CE;
 LATC         = 0x2D0;
_LATC         = 0x2D0;
_LATCbits     = 0x2D0;
 TRISD        = 0x2D2;
_TRISD        = 0x2D2;
_TRISDbits    = 0x2D2;
 PORTD        = 0x2D4;
_PORTD        = 0x2D4;
_PORTDbits    = 0x2D4;
 LATD         = 0x2D6;
_LATD         = 0x2D6;
_LATDbits     = 0x2D6;
 TRISE        = 0x2D8;
_TRISE        = 0x2D8;
_TRISEbits    = 0x2D8;
 PORTE        = 0x2DA;
_PORTE        = 0x2DA;
_PORTEbits    = 0x2DA;
 LATE         = 0x2DC;
_LATE         = 0x2DC;
_LATEbits     = 0x2DC;
 TRISF        = 0x2DE;
_TRISF        = 0x2DE;
_TRISFbits    = 0x2DE;
 PORTF        = 0x2E0;
_PORTF        = 0x2E0;
_PORTFbits    = 0x2E0;
 LATF         = 0x2E2;
_LATF         = 0x2E2;
_LATFbits     = 0x2E2;
 TRISG        = 0x2E4;
_TRISG        = 0x2E4;
_TRISGbits    = 0x2E4;
 PORTG        = 0x2E6;
_PORTG        = 0x2E6;
_PORTGbits    = 0x2E6;
 LATG         = 0x2E8;
_LATG         = 0x2E8;
_LATGbits     = 0x2E8;
 ADC1BUF0     = 0x300;
_ADC1BUF0     = 0x300;
 ADCBUF0      = 0x300;
_ADCBUF0      = 0x300;
 AD1CON1      = 0x320;
_AD1CON1      = 0x320;
_AD1CON1bits  = 0x320;
 AD1CON2      = 0x322;
_AD1CON2      = 0x322;
_AD1CON2bits  = 0x322;
 AD1CON3      = 0x324;
_AD1CON3      = 0x324;
_AD1CON3bits  = 0x324;
 AD1CHS123    = 0x326;
_AD1CHS123    = 0x326;
_AD1CHS123bits = 0x326;
 AD1CHS0      = 0x328;
_AD1CHS0      = 0x328;
_AD1CHS0bits  = 0x328;
 AD1PCFGH     = 0x32A;
_AD1PCFGH     = 0x32A;
_AD1PCFGHbits = 0x32A;
 AD1PCFGL     = 0x32C;
_AD1PCFGL     = 0x32C;
_AD1PCFGLbits = 0x32C;
 ADPCFG       = 0x32C;
_ADPCFG       = 0x32C;
_ADPCFGbits   = 0x32C;
 AD1CSSH      = 0x32E;
_AD1CSSH      = 0x32E;
_AD1CSSHbits  = 0x32E;
 AD1CSSL      = 0x330;
_AD1CSSL      = 0x330;
_AD1CSSLbits  = 0x330;
 AD1CON4      = 0x332;
_AD1CON4      = 0x332;
_AD1CON4bits  = 0x332;
 DMA0CON      = 0x380;
_DMA0CON      = 0x380;
_DMA0CONbits  = 0x380;
 DMA0REQ      = 0x382;
_DMA0REQ      = 0x382;
_DMA0REQbits  = 0x382;
 DMA0STA      = 0x384;
_DMA0STA      = 0x384;
 DMA0STB      = 0x386;
_DMA0STB      = 0x386;
 DMA0PAD      = 0x388;
_DMA0PAD      = 0x388;
 DMA0CNT      = 0x38A;
_DMA0CNT      = 0x38A;
 DMA1CON      = 0x38C;
_DMA1CON      = 0x38C;
_DMA1CONbits  = 0x38C;
 DMA1REQ      = 0x38E;
_DMA1REQ      = 0x38E;
_DMA1REQbits  = 0x38E;
 DMA1STA      = 0x390;
_DMA1STA      = 0x390;
 DMA1STB      = 0x392;
_DMA1STB      = 0x392;
 DMA1PAD      = 0x394;
_DMA1PAD      = 0x394;
 DMA1CNT      = 0x396;
_DMA1CNT      = 0x396;
 DMA2CON      = 0x398;
_DMA2CON      = 0x398;
_DMA2CONbits  = 0x398;
 DMA2REQ      = 0x39A;
_DMA2REQ      = 0x39A;
_DMA2REQbits  = 0x39A;
 DMA2STA      = 0x39C;
_DMA2STA      = 0x39C;
 DMA2STB      = 0x39E;
_DMA2STB      = 0x39E;
 DMA2PAD      = 0x3A0;
_DMA2PAD      = 0x3A0;
 DMA2CNT      = 0x3A2;
_DMA2CNT      = 0x3A2;
 DMA3CON      = 0x3A4;
_DMA3CON      = 0x3A4;
_DMA3CONbits  = 0x3A4;
 DMA3REQ      = 0x3A6;
_DMA3REQ      = 0x3A6;
_DMA3REQbits  = 0x3A6;
 DMA3STA      = 0x3A8;
_DMA3STA      = 0x3A8;
 DMA3STB      = 0x3AA;
_DMA3STB      = 0x3AA;
 DMA3PAD      = 0x3AC;
_DMA3PAD      = 0x3AC;
 DMA3CNT      = 0x3AE;
_DMA3CNT      = 0x3AE;
 DMA4CON      = 0x3B0;
_DMA4CON      = 0x3B0;
_DMA4CONbits  = 0x3B0;
 DMA4REQ      = 0x3B2;
_DMA4REQ      = 0x3B2;
_DMA4REQbits  = 0x3B2;
 DMA4STA      = 0x3B4;
_DMA4STA      = 0x3B4;
 DMA4STB      = 0x3B6;
_DMA4STB      = 0x3B6;
 DMA4PAD      = 0x3B8;
_DMA4PAD      = 0x3B8;
 DMA4CNT      = 0x3BA;
_DMA4CNT      = 0x3BA;
 DMA5CON      = 0x3BC;
_DMA5CON      = 0x3BC;
_DMA5CONbits  = 0x3BC;
 DMA5REQ      = 0x3BE;
_DMA5REQ      = 0x3BE;
_DMA5REQbits  = 0x3BE;
 DMA5STA      = 0x3C0;
_DMA5STA      = 0x3C0;
 DMA5STB      = 0x3C2;
_DMA5STB      = 0x3C2;
 DMA5PAD      = 0x3C4;
_DMA5PAD      = 0x3C4;
 DMA5CNT      = 0x3C6;
_DMA5CNT      = 0x3C6;
 DMA6CON      = 0x3C8;
_DMA6CON      = 0x3C8;
_DMA6CONbits  = 0x3C8;
 DMA6REQ      = 0x3CA;
_DMA6REQ      = 0x3CA;
_DMA6REQbits  = 0x3CA;
 DMA6STA      = 0x3CC;
_DMA6STA      = 0x3CC;
 DMA6STB      = 0x3CE;
_DMA6STB      = 0x3CE;
 DMA6PAD      = 0x3D0;
_DMA6PAD      = 0x3D0;
 DMA6CNT      = 0x3D2;
_DMA6CNT      = 0x3D2;
 DMA7CON      = 0x3D4;
_DMA7CON      = 0x3D4;
_DMA7CONbits  = 0x3D4;
 DMA7REQ      = 0x3D6;
_DMA7REQ      = 0x3D6;
_DMA7REQbits  = 0x3D6;
 DMA7STA      = 0x3D8;
_DMA7STA      = 0x3D8;
 DMA7STB      = 0x3DA;
_DMA7STB      = 0x3DA;
 DMA7PAD      = 0x3DC;
_DMA7PAD      = 0x3DC;
 DMA7CNT      = 0x3DE;
_DMA7CNT      = 0x3DE;
 DMACS0       = 0x3E0;
_DMACS0       = 0x3E0;
_DMACS0bits   = 0x3E0;
 DMACS1       = 0x3E2;
_DMACS1       = 0x3E2;
_DMACS1bits   = 0x3E2;
 DSADR        = 0x3E4;
_DSADR        = 0x3E4;
 C1CTRL1      = 0x400;
_C1CTRL1      = 0x400;
_C1CTRL1bits  = 0x400;
 C1CTRL2      = 0x402;
_C1CTRL2      = 0x402;
_C1CTRL2bits  = 0x402;
 C1VEC        = 0x404;
_C1VEC        = 0x404;
_C1VECbits    = 0x404;
 C1FCTRL      = 0x406;
_C1FCTRL      = 0x406;
_C1FCTRLbits  = 0x406;
 C1FIFO       = 0x408;
_C1FIFO       = 0x408;
_C1FIFObits   = 0x408;
 C1INTF       = 0x40A;
_C1INTF       = 0x40A;
_C1INTFbits   = 0x40A;
 C1INTE       = 0x40C;
_C1INTE       = 0x40C;
_C1INTEbits   = 0x40C;
 C1EC         = 0x40E;
_C1EC         = 0x40E;
_C1ECbits     = 0x40E;
 C1RERRCNT    = 0x40E;
_C1RERRCNT    = 0x40E;
 C1TERRCNT    = 0x40F;
_C1TERRCNT    = 0x40F;
 C1CFG1       = 0x410;
_C1CFG1       = 0x410;
_C1CFG1bits   = 0x410;
 C1CFG2       = 0x412;
_C1CFG2       = 0x412;
_C1CFG2bits   = 0x412;
 C1FEN1       = 0x414;
_C1FEN1       = 0x414;
_C1FEN1bits   = 0x414;
 C1FMSKSEL1   = 0x418;
_C1FMSKSEL1   = 0x418;
_C1FMSKSEL1bits = 0x418;
 C1FMSKSEL2   = 0x41A;
_C1FMSKSEL2   = 0x41A;
_C1FMSKSEL2bits = 0x41A;
 C1BUFPNT1    = 0x420;
_C1BUFPNT1    = 0x420;
_C1BUFPNT1bits = 0x420;
 C1RXFUL1     = 0x420;
_C1RXFUL1     = 0x420;
_C1RXFUL1bits = 0x420;
 C1BUFPNT2    = 0x422;
_C1BUFPNT2    = 0x422;
_C1BUFPNT2bits = 0x422;
 C1RXFUL2     = 0x422;
_C1RXFUL2     = 0x422;
_C1RXFUL2bits = 0x422;
 C1BUFPNT3    = 0x424;
_C1BUFPNT3    = 0x424;
_C1BUFPNT3bits = 0x424;
 C1BUFPNT4    = 0x426;
_C1BUFPNT4    = 0x426;
_C1BUFPNT4bits = 0x426;
 C1RXOVF1     = 0x428;
_C1RXOVF1     = 0x428;
_C1RXOVF1bits = 0x428;
 C1RXOVF2     = 0x42A;
_C1RXOVF2     = 0x42A;
_C1RXOVF2bits = 0x42A;
 C1RXM0SID    = 0x430;
_C1RXM0SID    = 0x430;
_C1RXM0SIDbits = 0x430;
 C1TR01CON    = 0x430;
_C1TR01CON    = 0x430;
_C1TR01CONbits = 0x430;
 C1RXM0EID    = 0x432;
_C1RXM0EID    = 0x432;
_C1RXM0EIDbits = 0x432;
 C1TR23CON    = 0x432;
_C1TR23CON    = 0x432;
_C1TR23CONbits = 0x432;
 C1RXM1SID    = 0x434;
_C1RXM1SID    = 0x434;
_C1RXM1SIDbits = 0x434;
 C1TR45CON    = 0x434;
_C1TR45CON    = 0x434;
_C1TR45CONbits = 0x434;
 C1RXM1EID    = 0x436;
_C1RXM1EID    = 0x436;
_C1RXM1EIDbits = 0x436;
 C1TR67CON    = 0x436;
_C1TR67CON    = 0x436;
_C1TR67CONbits = 0x436;
 C1RXM2SID    = 0x438;
_C1RXM2SID    = 0x438;
_C1RXM2SIDbits = 0x438;
 C1RXM2EID    = 0x43A;
_C1RXM2EID    = 0x43A;
_C1RXM2EIDbits = 0x43A;
 C1RXD        = 0x440;
_C1RXD        = 0x440;
 C1RXF0SID    = 0x440;
_C1RXF0SID    = 0x440;
_C1RXF0SIDbits = 0x440;
 C1RXF0EID    = 0x442;
_C1RXF0EID    = 0x442;
_C1RXF0EIDbits = 0x442;
 C1TXD        = 0x442;
_C1TXD        = 0x442;
_C1TXDbits    = 0x442;
 C1RXF1SID    = 0x444;
_C1RXF1SID    = 0x444;
_C1RXF1SIDbits = 0x444;
 C1RXF1EID    = 0x446;
_C1RXF1EID    = 0x446;
_C1RXF1EIDbits = 0x446;
 C1RXF2SID    = 0x448;
_C1RXF2SID    = 0x448;
_C1RXF2SIDbits = 0x448;
 C1RXF2EID    = 0x44A;
_C1RXF2EID    = 0x44A;
_C1RXF2EIDbits = 0x44A;
 C1RXF3SID    = 0x44C;
_C1RXF3SID    = 0x44C;
_C1RXF3SIDbits = 0x44C;
 C1RXF3EID    = 0x44E;
_C1RXF3EID    = 0x44E;
_C1RXF3EIDbits = 0x44E;
 C1RXF4SID    = 0x450;
_C1RXF4SID    = 0x450;
_C1RXF4SIDbits = 0x450;
 C1RXF4EID    = 0x452;
_C1RXF4EID    = 0x452;
_C1RXF4EIDbits = 0x452;
 C1RXF5SID    = 0x454;
_C1RXF5SID    = 0x454;
_C1RXF5SIDbits = 0x454;
 C1RXF5EID    = 0x456;
_C1RXF5EID    = 0x456;
_C1RXF5EIDbits = 0x456;
 C1RXF6SID    = 0x458;
_C1RXF6SID    = 0x458;
_C1RXF6SIDbits = 0x458;
 C1RXF6EID    = 0x45A;
_C1RXF6EID    = 0x45A;
_C1RXF6EIDbits = 0x45A;
 C1RXF7SID    = 0x45C;
_C1RXF7SID    = 0x45C;
_C1RXF7SIDbits = 0x45C;
 C1RXF7EID    = 0x45E;
_C1RXF7EID    = 0x45E;
_C1RXF7EIDbits = 0x45E;
 C1RXF8SID    = 0x460;
_C1RXF8SID    = 0x460;
_C1RXF8SIDbits = 0x460;
 C1RXF8EID    = 0x462;
_C1RXF8EID    = 0x462;
_C1RXF8EIDbits = 0x462;
 C1RXF9SID    = 0x464;
_C1RXF9SID    = 0x464;
_C1RXF9SIDbits = 0x464;
 C1RXF9EID    = 0x466;
_C1RXF9EID    = 0x466;
_C1RXF9EIDbits = 0x466;
 C1RXF10SID   = 0x468;
_C1RXF10SID   = 0x468;
_C1RXF10SIDbits = 0x468;
 C1RXF10EID   = 0x46A;
_C1RXF10EID   = 0x46A;
_C1RXF10EIDbits = 0x46A;
 C1RXF11SID   = 0x46C;
_C1RXF11SID   = 0x46C;
_C1RXF11SIDbits = 0x46C;
 C1RXF11EID   = 0x46E;
_C1RXF11EID   = 0x46E;
_C1RXF11EIDbits = 0x46E;
 C1RXF12SID   = 0x470;
_C1RXF12SID   = 0x470;
_C1RXF12SIDbits = 0x470;
 C1RXF12EID   = 0x472;
_C1RXF12EID   = 0x472;
_C1RXF12EIDbits = 0x472;
 C1RXF13SID   = 0x474;
_C1RXF13SID   = 0x474;
_C1RXF13SIDbits = 0x474;
 C1RXF13EID   = 0x476;
_C1RXF13EID   = 0x476;
_C1RXF13EIDbits = 0x476;
 C1RXF14SID   = 0x478;
_C1RXF14SID   = 0x478;
_C1RXF14SIDbits = 0x478;
 C1RXF14EID   = 0x47A;
_C1RXF14EID   = 0x47A;
_C1RXF14EIDbits = 0x47A;
 C1RXF15SID   = 0x47C;
_C1RXF15SID   = 0x47C;
_C1RXF15SIDbits = 0x47C;
 C1RXF15EID   = 0x47E;
_C1RXF15EID   = 0x47E;
_C1RXF15EIDbits = 0x47E;
 ODCA         = 0x6C0;
_ODCA         = 0x6C0;
_ODCAbits     = 0x6C0;
 ODCD         = 0x6D2;
_ODCD         = 0x6D2;
_ODCDbits     = 0x6D2;
 ODCF         = 0x6DE;
_ODCF         = 0x6DE;
_ODCFbits     = 0x6DE;
 ODCG         = 0x6E4;
_ODCG         = 0x6E4;
_ODCGbits     = 0x6E4;
 RCON         = 0x740;
_RCON         = 0x740;
_RCONbits     = 0x740;
 OSCCON       = 0x742;
_OSCCON       = 0x742;
_OSCCONbits   = 0x742;
 OSCCONL      = 0x742;
_OSCCONL      = 0x742;
 OSCCONH      = 0x743;
_OSCCONH      = 0x743;
 CLKDIV       = 0x744;
_CLKDIV       = 0x744;
_CLKDIVbits   = 0x744;
 PLLFBD       = 0x746;
_PLLFBD       = 0x746;
_PLLFBDbits   = 0x746;
 OSCTUN       = 0x748;
_OSCTUN       = 0x748;
_OSCTUNbits   = 0x748;
 BSRAM        = 0x750;
_BSRAM        = 0x750;
_BSRAMbits    = 0x750;
 SSRAM        = 0x752;
_SSRAM        = 0x752;
_SSRAMbits    = 0x752;
 NVMCON       = 0x760;
_NVMCON       = 0x760;
_NVMCONbits   = 0x760;
 NVMKEY       = 0x766;
_NVMKEY       = 0x766;
 PMD1         = 0x770;
_PMD1         = 0x770;
_PMD1bits     = 0x770;
 PMD2         = 0x772;
_PMD2         = 0x772;
_PMD2bits     = 0x772;
 PMD3         = 0x774;
_PMD3         = 0x774;
_PMD3bits     = 0x774;
/*
** ======= Base Addresses for Various Peripherals and ACC ======
*/

 ACCA         = 0x22;
_ACCA         = 0x22;
 ACCB         = 0x28;
_ACCB         = 0x28;
 CAN1         = 0x440;
_CAN1         = 0x440;
 IC1          = 0x140;
_IC1          = 0x140;
 IC2          = 0x144;
_IC2          = 0x144;
 IC3          = 0x148;
_IC3          = 0x148;
 IC4          = 0x14C;
_IC4          = 0x14C;
 IC5          = 0x150;
_IC5          = 0x150;
 IC6          = 0x154;
_IC6          = 0x154;
 IC7          = 0x158;
_IC7          = 0x158;
 IC8          = 0x15C;
_IC8          = 0x15C;
 OC1          = 0x180;
_OC1          = 0x180;
 OC2          = 0x186;
_OC2          = 0x186;
 OC3          = 0x18C;
_OC3          = 0x18C;
 OC4          = 0x192;
_OC4          = 0x192;
 OC5          = 0x198;
_OC5          = 0x198;
 OC6          = 0x19E;
_OC6          = 0x19E;
 OC7          = 0x1A4;
_OC7          = 0x1A4;
 OC8          = 0x1AA;
_OC8          = 0x1AA;
 SPI1         = 0x240;
_SPI1         = 0x240;
 SPI2         = 0x260;
_SPI2         = 0x260;
 UART1        = 0x220;
_UART1        = 0x220;
 UART2        = 0x230;
_UART2        = 0x230;
